// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FsTask.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SensorDataFeature : object, Xunit.IClassFixture<SensorDataFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SensorData.feature"
#line hidden
        
        public SensorDataFeature(SensorDataFeature.FixtureData fixtureData, FsTask_AcceptanceTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Sensor Data", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Receiving a single event from a sensos")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensor Data")]
        [Xunit.TraitAttribute("Description", "Receiving a single event from a sensos")]
        [Xunit.TraitAttribute("Category", "receiving_data")]
        public virtual void ReceivingASingleEventFromASensos()
        {
            string[] tagsOfScenario = new string[] {
                    "receiving_data"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receiving a single event from a sensos", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "human_id",
                            "pos_x",
                            "pos_y",
                            "vel_x",
                            "vel_y"});
                table1.AddRow(new string[] {
                            "631dad359fbc895818809423",
                            "15.32",
                            "8.75",
                            "0",
                            "0"});
#line 6
 testRunner.When("An event just received from a sensor at timestamp \'1662896469284\' as follow", ((string)(null)), table1, "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "timestamp",
                            "human_id",
                            "pos_x",
                            "pos_y",
                            "vel_x",
                            "vel_y"});
                table2.AddRow(new string[] {
                            "1662896469284",
                            "631dad359fbc895818809423",
                            "15.32",
                            "8.75",
                            "0",
                            "0"});
#line 9
 testRunner.Then("The event data will be persist as follow", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adjusting the timestamp of events")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensor Data")]
        [Xunit.TraitAttribute("Description", "Adjusting the timestamp of events")]
        [Xunit.TraitAttribute("Category", "receiving_data")]
        public virtual void AdjustingTheTimestampOfEvents()
        {
            string[] tagsOfScenario = new string[] {
                    "receiving_data"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adjusting the timestamp of events", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
 testRunner.Given("An event received from a sensor at timestamp \'1662896469284\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
 testRunner.When("An event arrived from a sensor at with timestamp \'1662896469200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "timestamp",
                            "order"});
                table3.AddRow(new string[] {
                            "1662896469200",
                            "0"});
                table3.AddRow(new string[] {
                            "1662896469284",
                            "1"});
#line 17
 testRunner.Then("The events data will be show in an ordered manner based on timestamp", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fetch sensor data based on time and human")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensor Data")]
        [Xunit.TraitAttribute("Description", "Fetch sensor data based on time and human")]
        [Xunit.TraitAttribute("Category", "receiving_data")]
        [Xunit.TraitAttribute("Category", "fetchEvents_human_time")]
        public virtual void FetchSensorDataBasedOnTimeAndHuman()
        {
            string[] tagsOfScenario = new string[] {
                    "receiving_data",
                    "fetchEvents_human_time"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fetch sensor data based on time and human", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "timestamp",
                            "human1",
                            "human2",
                            "human3"});
                table4.AddRow(new string[] {
                            "1662896469284",
                            "detected",
                            "",
                            "detected"});
                table4.AddRow(new string[] {
                            "1662896469280",
                            "detected",
                            "detected",
                            "detected"});
                table4.AddRow(new string[] {
                            "1662896469270",
                            "detected",
                            "",
                            ""});
                table4.AddRow(new string[] {
                            "1662896469260",
                            "",
                            "detected",
                            ""});
                table4.AddRow(new string[] {
                            "1662896469272",
                            "",
                            "detected",
                            ""});
#line 24
 testRunner.Given("These human environmental statistics was received from sensors", ((string)(null)), table4, "Given ");
#line hidden
#line 31
 testRunner.When("Fetching human environmental statistics based on time and human between \'16628964" +
                        "69270\' and \'1662896469280\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "timestamp",
                            "human1",
                            "human2",
                            "human3"});
                table5.AddRow(new string[] {
                            "1662896469270",
                            "detected",
                            "",
                            ""});
                table5.AddRow(new string[] {
                            "1662896469272",
                            "",
                            "detected",
                            ""});
                table5.AddRow(new string[] {
                            "1662896469280",
                            "detected",
                            "detected",
                            "detected"});
#line 32
 testRunner.Then("The event data will be fetched as follow", ((string)(null)), table5, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fetch sensor data based on time and position x")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensor Data")]
        [Xunit.TraitAttribute("Description", "Fetch sensor data based on time and position x")]
        [Xunit.TraitAttribute("Category", "receiving_data")]
        [Xunit.TraitAttribute("Category", "fetchEvents_positionX_time")]
        public virtual void FetchSensorDataBasedOnTimeAndPositionX()
        {
            string[] tagsOfScenario = new string[] {
                    "receiving_data",
                    "fetchEvents_positionX_time"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fetch sensor data based on time and position x", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "timestamp",
                            "human1",
                            "human2",
                            "human3"});
                table6.AddRow(new string[] {
                            "1662896469284",
                            "detected at postion 1.5-2.1",
                            "",
                            "detected at postion 10.2-2.1"});
                table6.AddRow(new string[] {
                            "1662896469280",
                            "detected at postion 5.2-2.1",
                            "detected at postion 1.4-2.1",
                            "detected at postion 10.2-2.1"});
                table6.AddRow(new string[] {
                            "1662896469270",
                            "detected at postion 5.0-2.6",
                            "",
                            ""});
                table6.AddRow(new string[] {
                            "1662896469260",
                            "",
                            "detected at postion 10.2-2.1",
                            ""});
                table6.AddRow(new string[] {
                            "1662896469272",
                            "",
                            "detected at postion 12.9-2.1",
                            ""});
#line 40
 testRunner.Given("These position x of human environmental statistics was received from sensors", ((string)(null)), table6, "Given ");
#line hidden
#line 47
 testRunner.When("Fetching human environmental statistics based on time and x position between \'166" +
                        "2896469270\' and \'1662896469280\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "timestamp",
                            "human1\'s x position",
                            "human2\'s x position",
                            "human3\'s x position"});
                table7.AddRow(new string[] {
                            "1662896469270",
                            "5.0",
                            "",
                            ""});
                table7.AddRow(new string[] {
                            "1662896469272",
                            "",
                            "12.9",
                            ""});
                table7.AddRow(new string[] {
                            "1662896469280",
                            "5.2",
                            "1.4",
                            "10.2"});
#line 48
 testRunner.Then("The event data of position x series will be fetched as follow", ((string)(null)), table7, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fetch sensor data based on time and position y")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensor Data")]
        [Xunit.TraitAttribute("Description", "Fetch sensor data based on time and position y")]
        [Xunit.TraitAttribute("Category", "receiving_data")]
        [Xunit.TraitAttribute("Category", "fetchEvents_positionX_time")]
        public virtual void FetchSensorDataBasedOnTimeAndPositionY()
        {
            string[] tagsOfScenario = new string[] {
                    "receiving_data",
                    "fetchEvents_positionX_time"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fetch sensor data based on time and position y", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "timestamp",
                            "human1",
                            "human2",
                            "human3"});
                table8.AddRow(new string[] {
                            "1662896469284",
                            "detected at postion 1.5-2.1",
                            "",
                            "detected at postion 10.2-2.1"});
                table8.AddRow(new string[] {
                            "1662896469280",
                            "detected at postion 5.2-2.1",
                            "detected at postion 1.4-2.1",
                            "detected at postion 10.2-2.1"});
                table8.AddRow(new string[] {
                            "1662896469270",
                            "detected at postion 5.0-2.6",
                            "",
                            ""});
                table8.AddRow(new string[] {
                            "1662896469260",
                            "",
                            "detected at postion 10.2-2.1",
                            ""});
                table8.AddRow(new string[] {
                            "1662896469272",
                            "",
                            "detected at postion 12.9-2.1",
                            ""});
#line 57
 testRunner.Given("These position y of human environmental statistics was received from sensors", ((string)(null)), table8, "Given ");
#line hidden
#line 64
 testRunner.When("Fetching human environmental statistics based on time and y position between \'166" +
                        "2896469270\' and \'1662896469280\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "timestamp",
                            "human1\'s y position",
                            "human2\'s y position",
                            "human3\'s y position"});
                table9.AddRow(new string[] {
                            "1662896469270",
                            "2.6",
                            "",
                            ""});
                table9.AddRow(new string[] {
                            "1662896469272",
                            "",
                            "2.1",
                            ""});
                table9.AddRow(new string[] {
                            "1662896469280",
                            "2.1",
                            "2.1",
                            "2.1"});
#line 65
 testRunner.Then("The event data of position y series will be fetched as follow", ((string)(null)), table9, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SensorDataFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SensorDataFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
